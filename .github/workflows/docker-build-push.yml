name: Build, Push and Deploy

on:
  push:
    tags: [ 'v*' ]
  # Removed main branch trigger to avoid double runs

env:
  REGISTRY: docker.io
  CLIENT_IMAGE_NAME: ${{ github.repository_owner }}/census-surveyor-app-client
  SERVER_IMAGE_NAME: ${{ github.repository_owner }}/census-surveyor-app-server

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push client image
        uses: docker/build-push-action@v5
        with:
          context: ./client
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.CLIENT_IMAGE_NAME }}:${{ github.ref_name }}
            ${{ env.REGISTRY }}/${{ env.CLIENT_IMAGE_NAME }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push server image
        uses: docker/build-push-action@v5
        with:
          context: ./server
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.SERVER_IMAGE_NAME }}:${{ github.ref_name }}
            ${{ env.REGISTRY }}/${{ env.SERVER_IMAGE_NAME }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create .env file
        run: |
          cat << EOF > .env
          # Docker Hub
          DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }}
          
          # Server Configuration
          PORT=8000
          NODE_ENV=production
          MAX_FILE_SIZE_TO_UPLOAD=5000000
          
          # MongoDB
          MONGODB_URI=${{ secrets.MONGODB_URI }}
          
          # AWS S3 Configuration
          S3_REGION=${{ secrets.S3_REGION }}
          S3_BUCKET=${{ secrets.S3_BUCKET }}
          S3_USER_PROFILE_PHOTO_UPLOAD_PATH=${{ secrets.S3_USER_PROFILE_PHOTO_UPLOAD_PATH }}
          AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
          EOF

      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # Create app directory if it doesn't exist
            mkdir -p /home/ubuntu/app
            
            # Copy docker-compose.yml and .env
            cat > /home/ubuntu/app/docker-compose.yml << 'EOL'
            version: '3.8'
            
            services:
              client:
                image: ${{ env.REGISTRY }}/${{ env.CLIENT_IMAGE_NAME }}:${{ github.ref_name }}
                ports:
                  - "3000:3000"
                environment:
                  - NODE_ENV=production
                  - NEXT_PUBLIC_API_URL=http://server:8000/api/v1
                depends_on:
                  - server
            
              server:
                image: ${{ env.REGISTRY }}/${{ env.SERVER_IMAGE_NAME }}:${{ github.ref_name }}
                ports:
                  - "8000:8000"
                environment:
                  - NODE_ENV=production
                  - PORT=${PORT:-8000}
                  - MONGODB_URI=${MONGODB_URI}
                  - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
                  - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
                  - S3_REGION=${S3_REGION}
                  - S3_BUCKET=${S3_BUCKET}
                  - S3_USER_PROFILE_PHOTO_UPLOAD_PATH=${S3_USER_PROFILE_PHOTO_UPLOAD_PATH}
                  - MAX_FILE_SIZE_TO_UPLOAD=${MAX_FILE_SIZE_TO_UPLOAD}
            EOL
            
            # Copy .env file
            cat > /home/ubuntu/app/.env << 'EOL'
            ${{ secrets.ENV_FILE }}
            EOL
            
            # Login to Docker Hub
            echo ${{ secrets.DOCKERHUB_TOKEN }} | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin
            
            # Pull and start containers
            cd /home/ubuntu/app
            docker-compose pull
            docker-compose up -d 